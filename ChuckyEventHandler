package com.chucky.myMod;

import cpw.mods.fml.common.IWorldGenerator;
import cpw.mods.fml.common.eventhandler.SubscribeEvent;

import java.util.Random;

import net.minecraft.block.Block;
import net.minecraft.entity.item.EntityItem;
import net.minecraft.entity.monster.EntityZombie;
import net.minecraft.init.Blocks;
import net.minecraft.item.ItemStack;
import net.minecraft.world.World;
import net.minecraft.world.chunk.IChunkProvider;
import net.minecraft.world.gen.feature.WorldGenMinable;
import net.minecraftforge.event.entity.living.LivingDropsEvent;

public class ChuckyEventHandler implements IWorldGenerator {

	@Override
	public void generate(Random random, int chunkX, int chunkZ, World world,
			IChunkProvider chunkGenerator, IChunkProvider chunkProvider) {
		switch (world.provider.dimensionId) {
		case -1:
			generateNether(world, random, chunkX * 16, chunkZ * 16);

		case 0:
			generateSurface(world, random, chunkX * 16, chunkZ * 16);

		case 1:
			generateEnd(world, random, chunkX * 16, chunkZ * 16);

		}

	}

	private void generateEnd(World world, Random random, int x, int z) {

	}

	private void generateSurface(World world, Random random, int x, int z) {
		//block, metadata, target block, world, random, blockX, blockZ, maxX, maxZ, vein size, chances, minY, maxY
		
		addOreSpawn(MMTaMBlocks.icosiumOre, 0, Blocks.stone, world, random, x,
				z, 8, 8, ChuckyConfig.icosiumMaxVeinSize, ChuckyConfig.icosiumChancesToSpawn, 30, 50);
		
		addOreSpawn(MMTaMBlocks.icosicOre, 0, Blocks.stone, world, random, x,
				z, 16, 16, ChuckyConfig.icosicgemMaxVeinSize, ChuckyConfig.icosicgemChancesToSpawn, 10, 20);

		int poxX = x + random.nextInt(14);
		int posY = 50 + random.nextInt(35);
		int poxZ = z + random.nextInt(14);
		if (ChuckyConfig.spawnBerry) {
			new WorldGenBerryPlant().generate(world, random, poxX, posY, poxZ);
		}
		if (ChuckyConfig.spawnCotton) {
			new WorldGenCottonPlant().generate(world, random, poxX, posY, poxZ);
		}
	}

	private void generateNether(World world, Random random, int x, int z) {
		if (ChuckyConfig.spawnNetherIcosium) {
			addOreSpawn(MMTaMBlocks.icosiumOre, 2, Blocks.netherrack, world,
					random, x, z, 16, 16, 9, 5, 20, 60);
		}
	}

	public void addOreSpawn(Block block, int metadata, Block target,
			World world, Random random, int blockXPos, int blockZPos, int maxX,
			int maxZ, int maxVeinSize, int chancesToSpawn, int minY, int maxY) {
		int maxPossY = minY + (maxY - 1);
		assert maxY > minY : "The maximum Y must be greater than the Minimum Y";
		assert maxX > 0 && maxX <= 16 : "addOreSpawn: The Maximum X must be greater than 0 and less than 16";
		assert minY > 0 : "addOreSpawn: The Minimum Y must be greater than 0";
		assert maxY < 256 && maxY > 0 : "addOreSpawn: The Maximum Y must be less than 256 but greater than 0";
		assert maxZ > 0 && maxZ <= 16 : "addOreSpawn: The Maximum Z must be greater than 0 and less than 16";

		int diffBtwnMinMaxY = maxY - minY;
		for (int x = 0; x < chancesToSpawn; x++) {
			int posX = blockXPos + random.nextInt(maxX);
			int posY = minY + random.nextInt(diffBtwnMinMaxY);
			int posZ = blockZPos + random.nextInt(maxZ);
			(new WorldGenMinable(block, metadata, maxVeinSize, target))
					.generate(world, random, posX, posY, posZ);
		}
	}

	@SubscribeEvent
	public void addDrops(LivingDropsEvent event) {
		int chance = (int) (Math.random() * 100);
		if (event.entity instanceof EntityZombie && chance <= 2) {
			event.drops.add(new EntityItem(event.entity.worldObj,
					event.entity.posX, event.entity.posY, event.entity.posZ,
					new ItemStack(MMTaMArmor.icoboots)));
		}
	}

}
