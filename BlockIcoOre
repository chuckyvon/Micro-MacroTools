package com.chucky.myMod.blocks;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import com.chucky.myMod.MMTaM;
import com.chucky.myMod.MMTaMBlocks;
import com.chucky.myMod.MMTaMItems;

import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;
import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.client.renderer.texture.IIconRegister;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.util.IIcon;
import net.minecraft.world.IBlockAccess;
import net.minecraft.world.World;
import net.minecraftforge.common.util.ForgeDirection;

public class BlockIcoOre extends Block {
	String name = "icoore";
	@SideOnly(Side.CLIENT)
	private IIcon[] icons;

	public BlockIcoOre() {
		super(Material.rock);
		setBlockName(MMTaM.MODID + "_" + name);

		setCreativeTab(CreativeTabs.tabBlock);
		setHardness(2F);
		setResistance(5F);
		setStepSound(soundTypeStone);
		setHarvestLevel("pickaxe", 2);

	}

	public ArrayList<ItemStack> getDrops(World world, int x, int y, int z, int meta, int fortune) {
		Random rand = new Random();
		ArrayList<ItemStack> ret = new ArrayList<ItemStack>();
		switch (meta) {
		case 0:
			ret.add(new ItemStack(MMTaMItems.icodust, 1 + fortune + rand.nextInt(3), 0));
			break;
		case 1:
			ret.add(new ItemStack(MMTaMBlocks.icosiumOre, 1, 1));
			break;

		case 2:
			ret.add(new ItemStack(MMTaMItems.icodust, 1 + fortune + rand.nextInt(3), 0));
			break;

		}
		return ret;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@SideOnly(Side.CLIENT)
	@Override
	public void getSubBlocks(Item par1, CreativeTabs par2CreativeTabs,
			List par3List) {
		for (int var4 = 0; var4 < 3; var4++) {
			par3List.add(new ItemStack(par1, 1, var4));
		}

	}

	@Override
	@SideOnly(Side.CLIENT)
	public void registerBlockIcons(IIconRegister par1IconRegister) {
		icons = new IIcon[4];

		for (int i = 0; i < icons.length; i++) {
			icons[i] = par1IconRegister.registerIcon(MMTaM.MODID + ":"
					+ "icoore" + i);

		}

	}

	@Override
	@SideOnly(Side.CLIENT)
	public IIcon getIcon(int par1, int par2) {
		switch (par2) {
		case 0:
			return icons[0];
		case 1:
			if (ForgeDirection.getOrientation(par1) == ForgeDirection.UP
					|| ForgeDirection.getOrientation(par1) == ForgeDirection.DOWN) {
				return icons[2];
			} else {
				return icons[1];
			}
		case 2:
			return icons[3];
		default:
			return null;

		}

	}

}
